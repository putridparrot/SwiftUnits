// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

import XCTest
@testable import SwiftUnits

final class DynesTests: XCTestCase {
	func testConvertKnownDynesToNewtons_1() throws {
		let result = Force.Dynes.toNewtons(900.0)
		XCTAssertEqual(0.009, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToNewtons_2() throws {
		let result = Force.Dynes.toNewtons(1234.0)
		XCTAssertEqual(0.01234, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToNewtons_3() throws {
		let result = Force.Dynes.toNewtons(46.0)
		XCTAssertEqual(0.00046, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToPoundals_1() throws {
		let result = Force.Dynes.toPoundals(10099.0)
		XCTAssertEqual(0.73046207, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToPoundals_2() throws {
		let result = Force.Dynes.toPoundals(80000.0)
		XCTAssertEqual(5.7864111, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToPoundals_3() throws {
		let result = Force.Dynes.toPoundals(12345.0)
		XCTAssertEqual(0.89291556, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToKilogramforce_1() throws {
		let result = Force.Dynes.toKilogramforce(123456.0)
		XCTAssertEqual(0.125890085, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToKilogramforce_2() throws {
		let result = Force.Dynes.toKilogramforce(80000.0)
		XCTAssertEqual(0.081577297, result, accuracy: 0.01)
	}

	func testConvertKnownDynesToKilogramforce_3() throws {
		let result = Force.Dynes.toKilogramforce(987654321.0)
		XCTAssertEqual(1007.12712394, result, accuracy: 0.01)
	}

}

final class KilogramforceTests: XCTestCase {
	func testConvertKnownKilogramforceToNewtons_1() throws {
		let result = Force.Kilogramforce.toNewtons(16.0)
		XCTAssertEqual(156.906, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToNewtons_2() throws {
		let result = Force.Kilogramforce.toNewtons(9.3)
		XCTAssertEqual(91.2018, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToNewtons_3() throws {
		let result = Force.Kilogramforce.toNewtons(5.0)
		XCTAssertEqual(49.0332, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToDynes_1() throws {
		let result = Force.Kilogramforce.toDynes(0.1)
		XCTAssertEqual(98066.5, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToDynes_2() throws {
		let result = Force.Kilogramforce.toDynes(0.009)
		XCTAssertEqual(8825.985, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToDynes_3() throws {
		let result = Force.Kilogramforce.toDynes(2.0)
		XCTAssertEqual(1961330.0, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToPoundals_1() throws {
		let result = Force.Kilogramforce.toPoundals(2.0)
		XCTAssertEqual(141.863, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToPoundals_2() throws {
		let result = Force.Kilogramforce.toPoundals(8.4)
		XCTAssertEqual(595.826, result, accuracy: 0.01)
	}

	func testConvertKnownKilogramforceToPoundals_3() throws {
		let result = Force.Kilogramforce.toPoundals(0.9)
		XCTAssertEqual(63.8385, result, accuracy: 0.01)
	}

}

final class NewtonsTests: XCTestCase {
	func testConvertKnownNewtonsToDynes_1() throws {
		let result = Force.Newtons.toDynes(0.7)
		XCTAssertEqual(70000.0, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToDynes_2() throws {
		let result = Force.Newtons.toDynes(0.08)
		XCTAssertEqual(8000.0, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToDynes_3() throws {
		let result = Force.Newtons.toDynes(2.3)
		XCTAssertEqual(230000.0, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToPoundals_1() throws {
		let result = Force.Newtons.toPoundals(190.0)
		XCTAssertEqual(1374.27, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToPoundals_2() throws {
		let result = Force.Newtons.toPoundals(0.7)
		XCTAssertEqual(5.06311, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToPoundals_3() throws {
		let result = Force.Newtons.toPoundals(89.0)
		XCTAssertEqual(643.738, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToKilogramforce_1() throws {
		let result = Force.Newtons.toKilogramforce(8.7)
		XCTAssertEqual(0.887153, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToKilogramforce_2() throws {
		let result = Force.Newtons.toKilogramforce(109.0)
		XCTAssertEqual(11.1149, result, accuracy: 0.01)
	}

	func testConvertKnownNewtonsToKilogramforce_3() throws {
		let result = Force.Newtons.toKilogramforce(6.9)
		XCTAssertEqual(0.703604, result, accuracy: 0.01)
	}

}

final class PoundalsTests: XCTestCase {
	func testConvertKnownPoundalsToNewtons_1() throws {
		let result = Force.Poundals.toNewtons(800.0)
		XCTAssertEqual(110.604, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToNewtons_2() throws {
		let result = Force.Poundals.toNewtons(8.2)
		XCTAssertEqual(1.13369, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToNewtons_3() throws {
		let result = Force.Poundals.toNewtons(190.0)
		XCTAssertEqual(26.2684, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToDynes_1() throws {
		let result = Force.Poundals.toDynes(0.01)
		XCTAssertEqual(138.255, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToDynes_2() throws {
		let result = Force.Poundals.toDynes(2.0)
		XCTAssertEqual(27651.0, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToDynes_3() throws {
		let result = Force.Poundals.toDynes(0.9)
		XCTAssertEqual(12442.94589384, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToKilogramforce_1() throws {
		let result = Force.Poundals.toKilogramforce(34.0)
		XCTAssertEqual(0.479335, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToKilogramforce_2() throws {
		let result = Force.Poundals.toKilogramforce(101.1)
		XCTAssertEqual(1.4253161, result, accuracy: 0.01)
	}

	func testConvertKnownPoundalsToKilogramforce_3() throws {
		let result = Force.Poundals.toKilogramforce(9.5)
		XCTAssertEqual(0.133932, result, accuracy: 0.01)
	}

}

